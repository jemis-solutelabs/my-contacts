// Mocks generated by Mockito 5.2.0 from annotations
// in flutter_base_project/test/features/contacts/data/repositories/contacts_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:flutter_base_project/src/core/sl_response.dart' as _i2;
import 'package:flutter_base_project/src/features/contacts/data/datasource/local_datasource.dart'
    as _i3;
import 'package:flutter_base_project/src/features/contacts/data/models/contact_model.dart'
    as _i5;
import 'package:flutter_base_project/src/utils/network_connectivity.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSlResponse_0<T> extends _i1.Fake implements _i2.SlResponse<T> {}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i3.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SlResponse<List<_i5.ContactModel>>> getContacts() =>
      (super.noSuchMethod(Invocation.method(#getContacts, []),
              returnValue: Future<_i2.SlResponse<List<_i5.ContactModel>>>.value(
                  _FakeSlResponse_0<List<_i5.ContactModel>>()))
          as _i4.Future<_i2.SlResponse<List<_i5.ContactModel>>>);
  @override
  _i4.Future<_i2.SlResponse<_i5.ContactModel?>> addContact(
          _i5.ContactModel? contact) =>
      (super.noSuchMethod(Invocation.method(#addContact, [contact]),
              returnValue: Future<_i2.SlResponse<_i5.ContactModel?>>.value(
                  _FakeSlResponse_0<_i5.ContactModel?>()))
          as _i4.Future<_i2.SlResponse<_i5.ContactModel?>>);
  @override
  _i4.Future<_i2.SlResponse<_i5.ContactModel?>> updateContact(
          _i5.ContactModel? contact) =>
      (super.noSuchMethod(Invocation.method(#updateContact, [contact]),
              returnValue: Future<_i2.SlResponse<_i5.ContactModel?>>.value(
                  _FakeSlResponse_0<_i5.ContactModel?>()))
          as _i4.Future<_i2.SlResponse<_i5.ContactModel?>>);
  @override
  _i4.Future<_i2.SlResponse<bool>> deleteContact(_i5.ContactModel? contact) =>
      (super.noSuchMethod(Invocation.method(#deleteContact, [contact]),
              returnValue:
                  Future<_i2.SlResponse<bool>>.value(_FakeSlResponse_0<bool>()))
          as _i4.Future<_i2.SlResponse<bool>>);
}

/// A class which mocks [NetworkConnectivityChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkConnectivityChecker extends _i1.Mock
    implements _i6.NetworkConnectivityChecker {
  MockNetworkConnectivityChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> isNetworkAvailable() =>
      (super.noSuchMethod(Invocation.method(#isNetworkAvailable, []),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<void> validateNetworkConnectivity() =>
      (super.noSuchMethod(Invocation.method(#validateNetworkConnectivity, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}
